class ApplicationVersion {
    Integer major
    Integer minor
    Integer build
    Integer patch
    Boolean release

    ApplicationVersion(Integer major, Integer minor, Integer build, Integer patch, Boolean release) {
        this.major = major
        this.minor = minor
        this.build = build
        this.patch = patch
        this.release = release
    }

    private String getRelease() {
        return this.release ? '' : '-SNAPSHOT'
    }

    String getVersion() {

        return "$major.$minor.$build.$patch" + this.getRelease()
    }
}


ext.loadVersion = { ->

    def versionPropertiesFile = file('version.properties')

    if(!versionPropertiesFile.exists()) {
        throw new Exception('No version.properties file found')
    }

    Properties versionProperties = new Properties()

    versionPropertiesFile.withInputStream { stream ->
        versionProperties.load(stream)
    }
    return new ApplicationVersion(versionProperties.major.toInteger(),
            versionProperties.minor.toInteger(),
            versionProperties.build.toInteger(),
            versionProperties.patch.toInteger(),
            versionProperties.release.toBoolean())

}

def updateVersionFile(versionFile, updates) {
    ant.propertyfile(file: versionFile) {
        updates.each { key, value ->
            entry(key: key, type: 'int', operation: value.operation, value: value.value)
        }
    }
}

def writeVersionToFile(version) {
    new File('publishedversion.txt').text = version
}

task majorVersionUpdate(group: 'versioning', description: 'Bump to next major version') {
    doFirst {
        updateVersionFile('version.properties', [major: [operation: '+', value: 1], minor: [operation: '=', value: 0], build: [operation: '=', value: 0], patch: [operation: '=', value: 0]])
    }
    doLast {
        writeVersionToFile(project.loadVersion().getVersion())
    }
}

task minorVersionUpdate(group: 'versioning', description: 'Bump to next minor version') {
    doFirst {
        updateVersionFile('version.properties', [minor: [operation: '+', value: 1], build: [operation: '=', value: 0], patch: [operation: '=', value: 0]])
    }
    doLast {
        writeVersionToFile(project.loadVersion().getVersion())
    }
}

task buildVersionUpdate(group: 'versioning', description: 'Bump to next build version') {
    doFirst {
        updateVersionFile('version.properties', [build: [operation: '+', value: 1], patch: [operation: '=', value: 0]])
    }
    doLast {
        writeVersionToFile(project.loadVersion().getVersion())
    }
}

task patchVersionUpdate(group: 'versioning', description: 'Bump to next patch version') {
    doFirst {
        updateVersionFile('version.properties', [patch: [operation: '+', value: 1]])
    }
    doLast {
        writeVersionToFile(project.loadVersion().getVersion())
    }
}

task releaseVersion(group: 'versioning', description: 'Make the version a release') {
    doFirst {
        updateVersionFile('version.properties', [release: [operation: '=', value: 'true']])
    }
    doLast {
        writeVersionToFile(project.loadVersion().getVersion())
    }
}

task preReleaseVersion(group: 'versioning', description: 'Make the version a pre release') {
    doFirst {
        updateVersionFile('version.properties', [release: [operation: '=', value: 'false']])
    }
    doLast {
        writeVersionToFile(project.loadVersion().getVersion())
    }
}